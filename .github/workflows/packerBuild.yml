name: Packer Image Builder for GCP

on:
  pull_request:
    types:
      - closed

jobs:
  packer-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        with:
          version: 1.7.3

      - name: Set up GCP Service Account
        uses: google-github-actions/auth@v2
        id: auth
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      - name: Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: gcloud CLI
        run: gcloud info

      - name: Zip Project
        run: zip -r webapp.zip .

      - name: Packer init
        run: packer init ./packer/.

      - name: Build Packer Image
        run: packer build -var 'project_id=${{secrets.GCP_PROJECT_ID}}' -var 'zone=${{secrets.GCP_ZONE}}' ./packer/. | tee build.log

      # - name: Extract Image Name
      #   run: |
      #     IMAGE_NAME=$(grep -oP 'A disk image is created in the .+ project: \K.+' build.log)
      #     echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
      - name: Extract Image Name
        run: |
          cat build.log  # This will print the content of build.log to the log for debugging
          IMAGE_NAME=$(grep -oP 'A disk image was created in the .+ project: \K.+' build.log)
          echo "Extracted IMAGE_NAME: ${IMAGE_NAME}"
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV


      - name: Authenticate with gcloud CLI
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > gcp-key.json
          gcloud auth activate-service-account --key-file=gcp-key.json

      - name: Generate a unique template name
        id: vars
        run: echo "TEMPLATE_NAME=${{ secrets.TEMPLATE_NAME }}-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      - name: Retrieve database password and host secrets
        run: |
          echo "DB_PASSWORD=$(gcloud secrets versions access latest --secret=db_password)" >> $GITHUB_ENV
          echo "DB_HOST=$(gcloud secrets versions access latest --secret=db_host)" >> $GITHUB_ENV
          echo "KEY_RING=$(gcloud secrets versions access latest --secret=key_ring)" >> $GITHUB_ENV

      - name: Create a new instance template
        run: |
          gcloud compute instance-templates create ${{ env.TEMPLATE_NAME }} \
            --region=us-east1 \
            --machine-type=${{ secrets.MACHINE_TYPE }} \
            --image=projects/csye-6225-ns-cloud-dev/global/images/${{env.IMAGE_NAME}} \
            --metadata=db_host=${{env.DB_HOST}},db_name=webapp,db_password=${{env.DB_PASSWORD}},db_user=webapp,startup-script=\#\!/bin/bash$'\n'$'\n'\#\ Function\ to\ fetch\ metadata\ attribute$'\n'get_metadata_attribute\(\)\ \{$'\n'\ \ local\ attribute=\"\$1\"$'\n'\ \ curl\ -sS\ \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/\$attribute\"\ -H\ \"Metadata-Flavor:\ Google\"$'\n'\}$'\n'$'\n'\#\ Fetch\ database\ configuration\ from\ instance\ metadata$'\n'DB_NAME=\$\(get_metadata_attribute\ \"db_name\"\)$'\n'DB_USER=\$\(get_metadata_attribute\ \"db_user\"\)$'\n'DB_PASSWORD=\$\(get_metadata_attribute\ \"db_password\"\)$'\n'DB_HOST=\$\(get_metadata_attribute\ \"db_host\"\)$'\n'$'\n'\#\ Path\ to\ your\ application\ environment\ file$'\n'ENV_FILE=\"/opt/csye6225/.env\"$'\n'$'\n'\#\ Configure\ your\ application\ with\ these\ values$'\n'cat\ \>\ \"\$ENV_FILE\"\ \<\<\ EOF$'\n'DB_DIALECT=\"postgres\"$'\n'DB_NAME=\$DB_NAME$'\n'DB_USER=\$DB_USER$'\n'DB_PASSWORD=\$DB_PASSWORD$'\n'DB_HOST=\$DB_HOST$'\n'GCLOUD_PROJECT_ID=\"csye-6225-ns-cloud-dev\"$'\n'EOF$'\n'$'\n'$'\n'$'\n'\#\ sudo\ tee\ .env\ \<\<EOL$'\n'\#\ PORT=5432$'\n'\#\ DB_HOST=\"localhost\"$'\n'\#\ DB_NAME=\"health_check_db\"$'\n'\#\ DB_DIALECT=\"postgres\"$'\n'\#\ DB_USER=\"postgres\"$'\n'\#\ DB_PASSWORD=\"root\"$'\n'\#\ EOL$'\n'$'\n'if\ cat\ \"\$ENV_FILE\"\;\ then$'\n'\ \ echo\ \"Application\ configuration\ updated\ successfully.\"$'\n'\ \ \#\ Replace\ with\ your\ actual\ service\ restart\ command\ or\ systemd\ unit\ reload\ if\ necessary$'\n'\ \ sudo\ systemctl\ restart\ webapp.service$'\n'else$'\n'\ \ echo\ \"Failed\ to\ update\ application\ configuration.\"$'\n'fi$'\n' \
            --boot-disk-type=pd-standard \
            --boot-disk-kms-key=projects/csye-6225-ns-cloud-dev/locations/us-east1/keyRings/${{env.KEY_RING}}/cryptoKeys/vm-crypto-key \
            --subnet=${{ secrets.SUBNETWORK }} \
            --service-account=${{ secrets.SERVICE_ACCOUNT_EMAIL }} \
            --scopes=https://www.googleapis.com/auth/cloud-platform \
            --tags=${{ secrets.TAGS }} \
           
      - name: Update managed instance group to use new template
        run: |
          gcloud compute instance-groups managed set-instance-template ${{ secrets.INSTANCE_GROUP_NAME }} \
            --template=${{ env.TEMPLATE_NAME }} \
            --region=${{ secrets.REGION }}

      - name: Recreate instances in the managed instance group
        run: |
          gcloud compute instance-groups managed rolling-action start-update ${{ secrets.INSTANCE_GROUP_NAME }} \
            --version template=${{ env.TEMPLATE_NAME }} \
            --region=${{ secrets.REGION }} \
            --type=${{secrets.ROLLING_TYPE}}

      - name: Wait for Refresh
        run: |
          gcloud compute instance-groups managed wait-until ${{secrets.INSTANCE_GROUP_NAME}}  \
            --version-target-reached \
            --region=${{ secrets.REGION }}
